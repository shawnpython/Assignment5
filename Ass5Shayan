##Assignment 5: Diamond Treasure Game
##Group Members: Shayan Noruzi, Daniela Di Francesco, Peyton Lupul
##Time contributed by each member: 33.3% each (equal distribution)
##Time spent on assignment: 20+hours
##Cmpt 120 - Diana Cukierman Spring 2015

import random
matrix=[]
answer=""


#Validation of dim
 

def intro():
    print "Welcome to my Diamond Treasure Hunter game! Hope you get lots of treasure!"
    return
 
def RandomOrUserGenerated(creation_of_board):
        if creation_of_board=="r":
                maxdiam=raw_input("please type a number between 1 and 10, which represent the # of diamonds within the matrix")
                maxdiam=int(maxdiam)
                matrix_elements(dim,maxdiam)
                RandomlyPlacedNegOne(matrix)
                
                
               
        elif creation_of_board=="u":
                list_of_lists=input("Provide a list of lists, same number of rows and columns wth integer numbers between 0 and 10 inclusive and maybe -1 ")
                print "The board is: "
                print "------------"
                for i in range(dim):
                        print " Col",i,
                for i in range(dim):
                        print "Row",i,
                        for j in range(dim):
                                print "  ",list_of_lists[i][j]," ",
                        print 
               
                return
 
 
def RandomlyPlacedNegOne(matrix):
        is_diamond = random.random()<.8
        if is_diamond:
                x=(random.randint(0,dim-1))
                y=(random.randint(0,dim-1))
                matrix[x][y] = -1
        return
 
def matrix_elements(dim,maxdiam):
    print "The board is"
    print "------------"
    #Putting random generated values into the matrix
    for i in range(dim):
        row=[]
        for c in range(dim):
            row.append(random.randint(0,maxdiam))
        matrix.append(row)
    return 
def displaying_matrix(matrix):
    #Displaying the matrix
    print "   ",
    for i in range(dim):
        print " Col",i,
    print "  "
    for i in range(dim):
        print "Row",i,
        for j in range(dim):
                print "  ",matrix[i][j]," ",
        print
    return matrix
 
def board_moves(matrix):
    count=0
    print "How would you like to travel?"
    print "r = row"
    print "c = column"
    print "m = main diagonal"
    user_move = raw_input("s = secondary diagonal        : ")
    user_range = "rcms"
    while user_move not in user_range:
        user_move = raw_input("please enter a valid letter: ")
        
    #row         
    if user_move == "r":
        int_column_move = 0
        row_move = raw_input("select a row to travel: ")
        int_row_move=int(row_move)              
        while int_row_move not in range(dim):
            row_move = raw_input("please enter a valid row: ")
        int_row_move=int(row_move)

              
    #column  
    if user_move == "c":
        column_move = raw_input("select a column to travel: ")
        int_column_move=int(column_move)              
        while int_column_move not in range(dim):
            column_move = raw_input("please enter a valid column: ")
        int_column_move=int(column_move)

    count = 0
    if user_move == "r":       
        for j in range(dim):
            if matrix[int_row_move][j] == -1:
                negative_one()
            if matrix[int_row_move][j]%2==0:
                count=count+((matrix[int_row_move][j])/2)
                matrix[int_row_move][j]=(matrix[int_row_move][j])/2
            else:
                count=count+matrix[int_row_move][j]
                matrix[int_row_move][j]=0
                
    if user_move == "c":
        for i in range(dim):
            if matrix[i][int_column_move] == -1:
                negative_one()
            if matrix[i][int_column_move]%2==0:
                count=count+((matrix[i][int_column_move])/2)
                matrix[i][int_column_move] = ((matrix[i][int_column_move])/2)
            else:
                count = count + matrix[i][int_column_move]
                matrix[i][int_column_move]=0

    if user_move == "m":
        for i in range(dim):
            if matrix[i][i] == -1:
                negative_one()
            if matrix[i][i]%2== 0:
                count = count+((matrix[i][i])/2)
                matrix[i][i]=(matrix[i][i]/2)
            else:
                count=count+matrix[i][i]
                matrix[i][i]=0
                
    new_count = 0 + count
    print "You just collected ", count, "diamonds"
    print "Your diamond total is", new_count, "diamonds"
    print " \n the new board is: \n"
    displaying_matrix(matrix)
    another_move=raw_input("would you like to make another move?y/n: ")
    another_move_range = "yn"
    while another_move not in another_move_range:
        another_move=raw_input("Please select y for yes and n for no: ")
    if another_move == "y":
        board_moves(matrix)
    
                    
    return

def negative_one():
    print "uh oh you fell in a trap! Game over"
    play_again(answer)
    return
    
def play_again(answer):
    flag=True
    answer=""
    number_of_hunters=1
    while flag==True:
            inputs()
            number_of_hunters+=1
            diamond_treasure_game()
            answer=raw_input("Would you like to play again? yes/no")
            
            if answer=="no":
                flag=False
    print
    print "Thanks for playing!"
    return

def Lucky_Number(matrix):
    global conversion_binary
    #changing matrix to 1's and 0's
    for i in range(dim):
        for j in range(dim):
            if matrix[i][j]%2!=0:
                matrix[i][j]=1
            elif matrix[i][j]==-1:
                matrix[i][j]=1
            else:
                matrix[i][j]=0
    #base10 calculations
    conversion_binary=""
    sum_of_conversion=0
    for q in range(dim):  
        conversion_binary=""
        for p in range(dim):
            position=str(matrix[q][p])
            conversion_binary=conversion_binary + position
        sum_of_conversion=sum_of_conversion+int(conversion_binary,2)
        
    print "Your lucky number is ", sum_of_conversion
    return matrix, sum_of_conversion
        
def diamond_treasure_game():
    RandomOrUserGenerated(creation_of_board)
    displaying_matrix(matrix)
    '''board_moves(matrix)'''
    Lucky_Number(matrix)

def inputs():
    global creation_of_board
    global dim
    global name
    global number_of_hunters
    name=raw_input("Good day hunter, what are thou name?")
    dim=raw_input("Choose a size for the board between 3 and 6, inclusive.")
    dimNum = "3456"
    while dim not in dimNum:
        dim=raw_input("Please re-insert a value between 3 and 6 ")
    creation_of_board=raw_input("Creation of board? (r-random,u-user) :")
    dim=int(dim)
    return creation_of_board,dim
     
def results():
    #how many hunters played
    #Sum of points from all hunters
    #Name of hunter with the max points and the amount of points
    print
    print "The number of hunters were: ", number_of_hunters
    print
    print "The sum of all their points is: ", sum_of_points
    print
    print "The name of the hunter with the max number of points is: ", name_of_max_hunter," and got this many points: ", max_hunters_points
    return
    
#TOP LEVEL!
number_of_hunters=1
sum_of_points=0
name_of_max_hunter=""
max_hunters_points=0

intro()
inputs()
RandomOrUserGenerated(creation_of_board)
displaying_matrix(matrix)
board_moves(matrix)
play_again(answer)
results()
